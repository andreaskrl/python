from random import randrange

# globals
board = [
    [" ", " ", " "],
    [" ", " ", " "],
    [" ", " ", " "]
]

availability = [(i, j) for i in range(3) for j in range(3)]

# functions


def winner_row(number):
    if (board[number][0] == board[number][1] and board[number][1] == board[number][2]) and board[number][0] != " ":
        return True


def winner_col(number):
    if (board[0][number] == board[1][number] and board[1][number] == board[2][number]) and board[0][number] != " ":
        return True


def winner_diag():
    if ((board[0][0] == board[1][1] and board[1][1] == board[2][2]) and board[0][0] != " ") or \
     ((board[0][2] == board[1][1] and board[1][1] == board[2][0]) and board[2][0] != " "):
        return True


def computer_moves(level):
    def choice(spaces):
        empty = False
        cnt = 0
        cycle = 0
        for space in spaces:
            if cycle == 3 or cycle == 6:
                cnt = 0
                empty = False
            if board[space[0]][space[1]] == " ":
                empty = space
            elif board[space[0]][space[1]] == "X":
                cnt += 1
            if empty is not False and cnt == 2:
                return empty
            cycle += 1
        else:
            return False

    if level == "1":
        x = availability.pop(randrange(len(availability)))
        return x
    else:
        by_row = [(i, j) for i in range(3) for j in range(3)]
        x = choice(by_row)
        if x is False:
            by_col = [(j, i) for i in range(3) for j in range(3)]
            x = choice(by_col)
        if x is False:
            by_diag1 = [(i, i) for i in range(3)]
            x = choice(by_diag1)
        if x is False:
            by_diag2 = [(i, 2 - i) for i in range(3)]
            x = choice(by_diag2)
        if x is False:
            if board[1][1] == " ":
                x = (1, 1)
                return x
        if x is False:
            corners = [(0, 0), (0, 2), (2, 0), (2, 2)]
            x = []
            for corner in corners:
                if board[corner[0]][corner[1]] == " ":
                    x += [corner]
            if len(x) >= 1:
                return x[randrange(len(x))]
            else:
                list_of_mid = [(0, 1), (1, 0), (2, 0), (2, 1)]
                x = []
                for mid in list_of_mid:
                    if board[mid[0]][mid[1]] == " ":
                        x += [mid]
                return x[randrange(len(x))]
        return x


def print_board():
    print("  +---+---+---+")
    print(str(2) + " | " + board[2][0] + " | " + board[2][1] + " | " + board[2][2] + " |")
    print("  +---+---+---+")
    print(str(1) + " | " + board[1][0] + " | " + board[1][1] + " | " + board[1][2] + " |")
    print("  +---+---+---+")
    print(str(0) + " | " + board[0][0] + " | " + board[0][1] + " | " + board[0][2] + " |")
    print("  +---+---+---+")
    print("    0   1   2")


def main():

    level = input("Choose the level of difficulty, 1-easy 2-hard: ")
    player = "O"

    for _ in range(9):
        # print board
        print_board()

        # choose next player
        if player == "X":
            player = "O"
        else:
            player = "X"

        # user input
        while player == "X":
            print("Player " + player + " plays! ")
            row = int(input("Give row: "))
            col = int(input("Give column: "))
            if row < 0 or row > 2:
                print("Row out of bounds (0-2). ")
                continue
            elif col < 0 or col > 2:
                print("Column out of bounds (0-2). ")
                continue
            elif board[row][col] != " ":
                print("Pick an empty box")
                continue
            else:
                board[row][col] = player
                availability.remove((row, col))
                break
        if player == "O":
            ai = computer_moves(level)
            board[ai[0]][ai[1]] = "O"

        # check winner

        winner = False
        for i in range(3):
            winner = winner_row(i)
            if winner:
                break
            winner = winner_col(i)
            if winner:
                break
        else:
            winner = winner_diag()

        if winner:
            print_board()
            print("Player " + player + " won! ")
            break
    else:
        print_board()
        print("Draw! ")


main()
